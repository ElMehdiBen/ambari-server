#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Thu Sep 17 10:04:05 2020
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
                          ;# script wasn't run conservatively originally
if {$force_conservative} {
        set send_slow {1 .1}
        proc send {ignore arg} {
                sleep .1
                exp_send -s -- $arg
        }
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn ambari-server setup
match_max 100000
expect -exact "Using python  /usr/bin/python\r
Setup ambari-server\r
Checking SELinux...\r
WARNING: Could not run /usr/sbin/sestatus: OK\r
Customize user account for ambari-server daemon \[y/n\] (n)? "
send -- "n\r"
expect -exact "n\r
Adjusting ambari-server permissions and ownership...\r
Checking firewall status...\r
Failed to get D-Bus connection: Operation not permitted\r
Checking JDK...\r
\[1\] Oracle JDK 1.8 + Java Cryptography Extension (JCE) Policy Files 8\r
\[2\] Custom JDK\r
==============================================================================\r
Enter choice (1): "
send -- "1\r"
expect -exact "Do you accept the Oracle Binary Code License Agreement \[y/n\] (y)? "
send -- "y\r"
expect -exact "Enable Ambari Server to download and install GPL Licensed LZO packages \[y/n\] (n)? "
send -- "y\r"
expect -exact "y\r
Completing setup...\r
Configuring database...\r
Enter advanced database configuration \[y/n\] (n)? "
send -- "y\r"
expect -exact "y\r
Configuring database...\r
==============================================================================\r
Choose one of the following options:\r
\[1\] - PostgreSQL (Embedded)\r
\[2\] - Oracle\r
\[3\] - MySQL / MariaDB\r
\[4\] - PostgreSQL\r
\[5\] - Microsoft SQL Server (Tech Preview)\r
\[6\] - SQL Anywhere\r
\[7\] - BDB\r
==============================================================================\r
Enter choice (1): "
send -- "3\r"
expect -exact "3\r
Hostname (localhost): "
send -- "\r"
expect -exact "\r
Port (3306): "
send -- "\r"
expect -exact "\r
Database name (ambari): "
send -- "\r"
expect -exact "\r
Username (ambari): "
send -- "\r"
expect -exact "\r
Enter Database Password (bigdata): "
send -- "\r"
expect -exact "\r
Configuring ambari database...\r
Should ambari use existing default jdbc /usr/share/java/mysql-connector-java.jar \[y/n\] (y)? "
send -- "y\r"
expect -exact "y\r
Configuring remote database connection properties...\r
WARNING: Before starting Ambari Server, you must run the following DDL directly from the database shell to create the schema: /var/lib/ambari-server/resources/Ambari-DDL-MySQL-CREATE.sql\r
Proceed with configuring remote database connection properties \[y/n\] (y)? "
send -- "y\r"
expect eof
